#+Title Jesse Mendez's Emacs Configuration
#+OPTIONS: toc:4 h:4
* Configuration
** Personal Information
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Jesse Mendez"
      user-mail-address "jessepmendez79@gmail.com")
#+END_SRC
** Location Settings
Sets up Latitude and Longitude for Weather Reports and Sunrise/Sunset Settings
#+BEGIN_SRC emacs-lisp
(setq calendar-latitude 33.7)
(setq calendar-longitude -118.3)
#+END_SRC

** Emacs Initialization
*** Package Sources
#+BEGIN_SRC emacs-lisp
(require 'package)
(package-initialize)
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
(add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/") t)
(add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/")t)
#+END_SRC
*** Personal Lisp Directories and Other Load Paths
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/local-lisp")
(add-to-list 'load-path "~/.emacs.d/local-lisp/git-emacs-master")
(add-to-list 'load-path "~/.emacs.d/local-lisp/async")
(add-to-list 'load-path "~/.emacs.d/local-lisp/helm")
(unless (package-installed-p 'use-package)
 (package-install 'use-package))
(setq use-package-verbose t)
(require 'use-package)
(use-package auto-compile
  :ensure t
  :config (auto-compile-on-load-mode))
(setq load-prefer-newer t)
#+END_SRC
*** Load Passwords and Stuff
Load through a seperate file, so I can VC this file more easily
#+BEGIN_SRC emacs-lisp
;(load ~/.emacs.secrets t)
#+END_SRC
** General Configuration
*** Backups
Hide the Emacs Poo
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
(setq delete-old-versions t) 
#+END_SRC
*** Windows Configuration
Emacs Beard Level:  Wizard
#+BEGIN_SRC emacs-lisp
(require 'uniquify)
(when window-system
  (tooltip-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (display-time-mode 1)
  (column-number-mode 1)
  (scroll-bar-mode -1))
#+END_SRC
*** Change Yes and No to Y and N
Change this because I am a lazy bastard
#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
*** Theme Settings
My current flavor of the month
#+BEGIN_SRC emacs-lisp
(require 'moe-theme)
(require 'moe-theme-switcher)
#+END_SRC
*** Autocomplete and AutoPair
#+BEGIN_SRC emacs-lisp
(show-paren-mode t)
(setq show-paren-style 'expression)
(global-auto-complete-mode t)
(autopair-global-mode)
(show-paren-mode t)
(setq-default highlight-tabs t)
#+END_SRC
*** Helm Mode
#+BEGIN_SRC emacs-lisp
(use-package helm
  :ensure t
  :diminish helm-mode
  :init
  (progn
    (require 'helm-config)
    (setq helm-candidate-number-limit 100)
    ;; From https://gist.github.com/antifuchs/9238468
    (setq helm-idle-delay 0.0 ; update fast sources immediately (doesn't).
          helm-input-idle-delay 0.01  ; this actually updates things
                                        ; reeeelatively quickly.
          helm-yas-display-key-on-candidate t
          helm-quick-update t
          helm-M-x-requires-pattern nil
          helm-ff-skip-boring-files t)
    (helm-mode))
  :bind (("C-c h" . helm-mini)
         ("C-h a" . helm-apropos)
         ("C-x C-b" . helm-buffers-list)
         ("C-x b" . helm-buffers-list)
         ("M-y" . helm-show-kill-ring)
         ("M-x" . helm-M-x)
         ("C-x c o" . helm-occur)
         ("C-x c s" . helm-swoop)
         ("C-x c y" . helm-yas-complete)
         ("C-x c Y" . helm-yas-create-snippet-on-region)
         ("C-x c b" . my/helm-do-grep-book-notes)
         ("C-x c SPC" . helm-all-mark-rings)
))
(ido-mode -1) ;; Turn off ido mode in case I enabled it accidentall
#+END_SRC
*** Line Numbers
I like Line Numbers
#+BEGIN_SRC emacs-lisp
(column-number-mode 1)
#+END_SRC
** Writing
*** Appearence
Use Visual Line Mode so it reads nice, but doesn't mess with the actual file
#+BEGIN_SRC emacs-lisp
(remove-hook 'text-mode-hook #'turn-on-auto-fill)
(add-hook 'text-mode-hook 'turn-on-visual-line-mode)
(global-visual-line-mode t)
#+END_SRC
*** Spelling
Set up Spell Checking
#+BEGIN_SRC emacs-lisp
;(setq ispell-program-name "aspell")
;(setq ispell-personal-dictionary "~/.ispell")
;(dolist (hook '(org-mode-hook))
 ;
;     (add-hook hook (lambda () (flyspell-mode 1))))
 ;   (dolist (hook '(change-log-mode-hook log-edit-mode-hook))
  ;    (add-hook hook (lambda () (flyspell-mode -1))))
#+END_SRC
*** Latex
Turn on Auto Complete for Latex buffers and set up citation
#+BEGIN_SRC emacs-lisp
(require 'auto-complete-auctex)
(setq reftex-plug-into-AUCTeX t)
#+END_SRC
** Org
#+BEGIN_SRC
(use-package org
   :ensure t
)
(require 'org-page)
#+END_SRC
*** Keybindings
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-ca" 'org-agenda)
#+END_SRC
*** Keywords
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
      '((sequence "NEXT(n!)" "|" "DONE(d!)")
        (sequence "WAITING(w@/!)" "APPT(a!)" )
        (sequence "|" "CANCELED(c@/!)")))
#+END_SRC

*** Org Mobile
#+BEGIN_SRC emacs-lisp
(setq org-mobile-directory "/sshx:calendar:/home/calendar/MobileOrg/")
(setq org-mobile-inbox-for-pull "/sshx:calendar:/home/calendar/MobileOrg/refile.org")
#+END_SRC
*** Note Taking 
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/Notes")
(setq org-default-notes-file "~/Notes/gtd.org")
#+END_SRC

*** Time Clocking
#+BEGIN_SRC emacs-lisp
(setq org-clock-persist 'history)
(org-clock-persistence-insinuate)
#+END_SRC
*** Templates
Capture templates and other Fill in Stuff
#+BEGIN_SRC emacs-lisp
(setq org-capture-templates
        `(("i" "Save a thought for processing" entry
           (file+headline "~/Notes/gtd.org" "Inbox"))
           ("a" "Save an appointment" entry
           (file+headline "~/Notes/gtd.org" "Calendar")
           "* APPT %^{Task}\nSCHEDULED: %t\n"
           :immediate-finish t)))
#+END_SRC
** Programming
*** Projectile
Manage programming projects in Emacs
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :defer t
  :diminish projectile-mode
  :config
  (progn
    (setq projectile-keymap-prefix (kbd "C-c p"))
    (setq projectile-completion-system 'default)
    (setq projectile-enable-caching t)
    (setq projectile-indexing-method 'alien)
    (add-to-list 'projectile-globally-ignored-files "node-modules"))
  :config
  (projectile-global-mode))
  ;(use-package helm-projectile
   ;  :defer t :ensure t)
#+END_SRC

*** Emacs Lisp Development
#BEGIN_SRC emacs-lisp
(autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
    (add-hook 'emacs-lisp-mode-hook #'enable-paredit-mode)
    (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
    (add-hook 'ielm-mode-hook #'enable-paredit-mode)
    (add-hook 'lisp-mode-hook #'enable-paredit-mode)
    (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
    (add-hook 'scheme-mode-hook #'enable-paredit-mode)
#END_SRC
*** C/C++ Development
#+BEGIN_SRC emacs-lisp
(setq c-default-style '((java-mode . "java")
                        (awk-mode . "awk")
                        (other . "linux")))
(setq-default c-electric-flag t)
(setq c-toggle-electric-state 1)
(add-hook 'c-mode-hook 'c-toggle-auto-newline 1)
(defun my-c-mode-common-hook ()
  (c-toggle-auto-newline 1)
  (linum-mode)
  (autopair-mode))
  
(add-hook 'c-mode-common-hook 'my-c-mode-common-hook)
#+END_SRC
*** Version Control
Get a modeline icon for git
#+BEGIN_SRC emacs-lisp
(require 'git-emacs)
#+END_SRC
*** Snippets
Initialize yasnippets
#+BEGIN_SRC emacs-lisp

(use-package yasnippet
  :ensure t
  :diminish yas-minor-mode
  :init (yas-global-mode)
  :config
  (progn
    (yas-global-mode)
    (add-hook 'hippie-expand-try-functions-list 'yas-hippie-try-expand)
    (setq yas-key-syntaxes '("w_" "w_." "^ "))
    (setq yas-installed-snippets-dir "~/.emacs.d/yasnippet-snippets")
    (setq yas-expand-only-for-last-commands nil)
    (yas-global-mode 1)
    (bind-key "\t" 'hippie-expand yas-minor-mode-map)
    (add-to-list 'yas-prompt-functions 'shk-yas/helm-prompt)))
;;        (global-set-key (kbd "C-c y") (lambda () (interactive)
;;                                         (yas/load-directory "~/elisp/snippets")))
#+END_SRC
