#+Title Jesse Mendez's Emacs Configuration
#+OPTIONS: toc:4 h:4
* Configuration
** Stub Loading Code
Save as init.el, it contains the required code to load this .org file
#+BEGIN_SRC emacs-lisp
  ;; ;;; Emacs Init to Load an Awesome Org Config File

  ;; ;; Initialization
  ;; (package-initialize nil)
  ;; (setq package-enable-at-startup nil)
  ;; ;;Loading Package Archives
  ;; (org-babel-load-file "~/.emacs.d/Jesse.org")
#+END_SRC
** Personal Information
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Jesse Mendez"
      user-mail-address "jessepmendez79@gmail.com")
#+END_SRC
** Location Settings
Sets up Latitude and Longitude for Weather Reports and Sunrise/Sunset Settings
#+BEGIN_SRC emacs-lisp
(setq calendar-latitude 33.7)
(setq calendar-longitude -118.3)
#+END_SRC
** Emacs Initialization
*** Package Sources
#+BEGIN_SRC emacs-lisp
(require 'package)
(package-initialize)
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
(add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/") t)
(add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/")t)
#+END_SRC
*** Personal Lisp Directories and Other Load Paths
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/local-lisp")
(unless (package-installed-p 'use-package)
 (package-install 'use-package))
(setq use-package-verbose t)
(require 'use-package)
(use-package auto-compile
  :ensure t
  :config (auto-compile-on-load-mode))
(setq load-prefer-newer t)
#+END_SRC
** General Configuration
*** Backups
Hide the Emacs Poo
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
(setq delete-old-versions t) 
#+END_SRC
*** Windows Configuration
#+BEGIN_SRC emacs-lisp
(server-start)
(display-time-mode 1)
(display-battery-mode 1)
(require 'exwm)
(require 'exwm-config)
(exwm-config-default)
(require 'exwm-systemtray)
(exwm-systemtray-enable)
(defun exwm-rename-buffer-to-title () (exwm-workspace-rename-buffer exwm-title))
(add-hook 'exwm-update-title-hook 'exwm-rename-buffer-to-title)

#+END_SRC
*** Change Yes and No to Y and N
Change this because I am a lazy bastard
#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
*** Line Numbers
I like Line Numbers
#+BEGIN_SRC emacs-lisp
(column-number-mode 1)
#+END_SRC
*** MIME Stuff
#+BEGIN_SRC emacs-lisp
(setq browse-url-browser-function 'browse-url-firefox)
#+END_SRC
*** Terminal stuff
#+BEGIN_SRC emacs-lisp
(require 'eshell)

(setq eshell-output-filter-functions
    (remove 'eshell-handle-ansi-color eshell-output-filter-functions))
(setq eshell-prompt-function (lambda nil
    (concat
     (propertize (eshell/pwd) 'face `(:foreground "blue"))
     (propertize "  Î» " 'face `(:foreground "bold white")))))
  (setq eshell-highlight-prompt nil)
(setq eshell-scroll-to-bottom-on-input t)
  ;; (add-to-list 'eshell-visual-commands "dispatch-conf")
  ;; (add-to-list 'eshell-visual-commands "alsamixer")
;;(keychain-refresh-environment)
#+END_SRC
*** Inline images
#+BEGIN_SRC emacs-lisp
(autoload 'iimage-mode "iimage" "Support Inline image minor mode." t)
(autoload 'turn-on-iimage-mode "iimage" "Turn on Inline image minor mode." t)
#+END_SRC

*** Address Book
#+BEGIN_SRC emacs-lisp
(setq vdirel-repository "~/.contacts.org")
#+END_SRC
*** Crypto
#+BEGIN_SRC emacs-lisp
(setq epa-pinentry-mode 'loopback)
(pinentry-start)
#+END_SRC
*** Theme
#+BEGIN_SRC emacs-lisp
(use-package moe-theme
   :ensure t
   :config
   (require 'moe-theme-switcher)
   (show-paren-mode t)
   (setq show-paren-style 'expression)
)

#+END_SRC
** Writing
*** Appearence
Use Visual Line Mode so it reads nice, but doesn't mess with the actual file
#+BEGIN_SRC emacs-lisp
(remove-hook 'text-mode-hook #'turn-on-auto-fill)
(add-hook 'text-mode-hook 'turn-on-visual-line-mode)
(global-visual-line-mode t)
#+END_SRC
*** Spelling
Set up Spell Checking
#+BEGIN_SRC emacs-lisp
  (use-package ispell
     :config
     ;; (add-hook 'LaTex-mode-hook 'flyspell-mode)
     ;; (add-hook 'LaTeX-mode-hook 'flyspell-buffer)
     (add-hook 'org-mode-hook 'flyspell-mode)
     (add-hook 'message-mode 'flyspell-mode))
#+END_SRC
*** Latex
Turn on Auto Complete for Latex buffers and set up citation
#+BEGIN_SRC emacs-lisp
  ;(require 'auto-complete-auctex)
  ;; (setq reftex-plug-into-AUCTeX t)
  ;;(pdf-tools-install) ;; start server
(use-package pdf-tools
  :magic ("%PDF" . pdf-view-mode)
  :config
  (pdf-tools-install :no-query))
  (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
    TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view)))
  (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)
#+END_SRC
** Org
#+BEGIN_SRC emacs-lisp
(use-package org-plus-contrib
   :ensure t
   :config
   (require 'org)
   (require 'org-checklist)
   (require 'org-contacts)
   (require 'org-protocol)

)
#+END_SRC
*** Keybindings
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-c." 'org-time-stamp)
(global-set-key (kbd "\C-cb") 'org-brain-visualize)
(global-set-key "\C-cp" 'org-pomodoro)
#+END_SRC
*** Tags
#+BEGIN_SRC emacs-lisp
(setq org-tags-exclude-from-inheritance "project")
#+END_SRC
*** Keywords
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
      '((sequence "NEXT(n)" "|" "DONE(d)" "Delegated(D)")
        (sequence "WAITING(w)" "APPT(a)" )
        (sequence "|" "CANCELED(c)")))
#+END_SRC
*** Agendas
#+BEGIN_SRC emacs-lisp
(setq org-stuck-projects
    '("+LEVEL=2+project-someday-hw/-SOMEDAY-DONE" ("NEXT" "WAITING") ))
  (setq org-agenda-custom-commands
     '(("W" "Weekly Review"
       ((agenda "" ((org-agenda-ndays 7))) ;; review upcoming deadlines and appointments
					     ;; type "l" in the agenda to review logged items 
	    (stuck "") ;; review stuck projects as designated by org-stuck-projects
	    (tags "+LEVEL=2+project-someday-hw") ;; review all projects (assuming you use todo keywords to designate projects)
	    (tags "+LEVEL=1+someday") ;; review someday/maybe items
	    (todo "WAITING"))) ;; review waiting items 
	   ("o" tags-todo "@office-someday")
       ("p" tags-todo "@phone-someday")
       ("c" tags-todo "@campus-someday")
       ("i" tags-todo "@internet-someday")
       ("l" tags-todo "@laptop-someday")
       ("m" tags-todo "mom-someday")
       ("d" tags-todo "dad-someday")
       ("g" tags-todo "gabi-someday")
       ("h" tags-todo "@home-someday")
       ("e" tags-todo "@errand-someday")
       ("w" tags-todo "@anywhere-someday")
	  ))
#+END_SRC
*** Org Mobile
#+BEGIN_SRC emacs-lisp
  ;; (setq org-mobile-directory "/sshx:calendar:/home/system/MobileOrg/")
  ;; (setq org-mobile-inbox-for-pull "~/Notes/inbox.org")
  (setq org-agenda-files '("~/Notes/org/gcal.org"))
  ;; Push org files to org mobile when saved
  ;; (defun org-mobile-push-hook ()
  ;;   (when (equal major-mode 'org-mode)
  ;;     (add-hook 'after-save-hook 'org-mobile-push)
  ;;   )
  ;; )

#+END_SRC
*** Note Taking 
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/Notes")
(setq org-default-notes-file "~/Notes/org/inbox.org")
(setq org-pretty-entities t)
;(add-hook 'org-mode-hook 'turn-on-org-cdlatex)
(setq org-outline-path-complete-in-steps nil)         ; Refile in a single go
(setq org-refile-use-outline-path 'file)                  ; Show full paths for refiling
#+END_SRC

*** Time Clocking
#+BEGIN_SRC emacs-lisp
(org-clock-persistence-insinuate)
#+END_SRC
*** Templates
Capture templates and other Fill in Stuff
#+BEGIN_SRC emacs-lisp
(setq org-refile-targets '(("~/Notes/org/gtd.org" :maxlevel . 2)
                           ("~/Notes/org/someday.org" :level . 1)))
(setq org-capture-templates 
                         '(("i" "Save a thought" entry (file "~/Notes/org/inbox.org")
			        "* %?")
			   ("a" "Appointment" entry (file  "~/Notes/gcal.org" )
"* %?\n\n%^T\n\n:PROPERTIES:\n\n:END:\n\n")
                           ("p" "Protocol" entry (file "~/Notes/org/inbox.org")
        "* %^{Title}\nSource: %u, %c\n #+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n\n%?")
	                   ("L" "Protocol Link" entry (file "~/Notes/org/inbox.org")
        "* %? [[%:link][%:description]] \nCaptured On: %U")

))
#+END_SRC
*** Encryption
Setup Encrytption
#+BEGIN_SRC emacs-lisp
(require 'org-crypt)
(org-crypt-use-before-save-magic)
(setq org-tags-exclude-from-inheritance (quote ("crypt")))
#+END_SRC
*** Timestamps
#+BEGIN_SRC emacs-lisp
(setq org-display-custom-times t)
(setq org-time-stamp-custom-formats '("<%b %e, %Y>" . "<%b %e, %Y %H:%M>"))
#+END_SRC
*** Org Brain
#+BEGIN_SRC emacs-lisp
  (use-package org-brain 
      :ensure t
      :init
      (setq org-brain-path "~/Notes/brain")
      :config
      (setq org-id-track-globally t)
      (setq org-id-locations-file "~/.emacs.d/.org-id-locations")
      (setq org-brain-visualize-default-choices 'all)
      (setq org-brain-title-max-length 10))
      (defun aa2u-buffer ()
	 (aa2u (point-min) (point-max)))

      (add-hook 'org-brain-after-visualize-hook #'aa2u-buffer)
#+END_SRC
*** Calendar
#+BEGIN_SRC emacs-lisp
(require 'org-gcal)
(setq org-gcal-client-id "240464530285-vbhb9djmk27n0tg33j3i2etgpf1ro03d.apps.googleusercontent.com")
(setq org-gcal-client-secret "oqg3oD4BpK51lmpVW4avJO8j")
(setq org-gcal-file-alist '(("jessepmendez79@gmail.com" .  "~/Notes/gcal.org")
                            ("aveneriotrejo@gmail.com" . "~/Notes/ana.org")))
#+END_SRC
(setq org-gcal-client-id "240464530285-nsdkfjqhsdnhnm021jt3g78lo9e0odi9.apps.googleusercontent.com"
org-gcal-client-secret "u4Asg7c4h-VE7Moe0zu8X7L8"

** Programming
*** C/C++ Development
#+BEGIN_SRC emacs-lisp
(setq c-default-style '((java-mode . "java")
                        (awk-mode . "awk")
                        (other . "linux")))
(setq-default c-electric-flag t)
(setq c-toggle-electric-state 1)
(add-hook 'c-mode-hook 'c-toggle-auto-newline 1)
(defun my-c-mode-common-hook ()
  (c-toggle-auto-newline 1)
  (linum-mode)
  (autopair-mode))
  
(add-hook 'c-mode-common-hook 'my-c-mode-common-hook)
(add-hook 'c-mode-common-hook 'flycheck-mode)
#+END_SRC
** Remote
#+BEGIN_SRC emacs-lisp
(setq ange-fpt-ftp-program-name "ncftp")
#+END_SRC
** Email
#+BEGIN_SRC emacs-lisp
  (require 'notmuch)
  (require 'org-notmuch)
  (setq notmuch-command "notmuch-remote")
  (setq notmuch-fcc-dirs nil)
  ;; Gnus Posting Alias
  ;; (setq gnus-alias-identity-alist
  ;;    '(("personal"
  ;;    nil ;; Organization
  ;;    nil ;; Headers
  ;;    nil ;; Body Text
  ;;    nil)))
  ;; (setq gnus-alias-default-identity "personal")
  ;;(add-hook 'message-setup-hook 'gnus-alias-determine-identity)
  ;; Configuring outgoing smtp servers
  (setq message-send-mail-function 'message-send-mail-with-sendmail)
  (setq send-mail-function 'message-sendmail-with-sendmail)
  (setq sendmail-program "/usr/bin/msmtp")
  ;; This is needed to allow msmtp to do its magic:
  (setq message-sendmail-f-is-evil 't)
  (setq message-sendmail-extra-arguments '("--read-envelope-from"))
  (setq gnus-permanently-visible-groups ".*")
  (setq gnus-thread-sort-functions
	'(gnus-thread-sort-by-most-recent-date))
  (setq message-sendmail-envelope-from "header")

  (define-key notmuch-show-mode-map "D"
      (lambda ()
      "mark message as deleted"
      (interactive)
  (notmuch-show-tag (list "+deleted" "-inbox"))))
  (setq notmuch-multipart/alternative-discouraged '("text/plain" "text/html"))
  (add-hook 'message-setup-hook 'mml-secure-message-sign-pgpmime)
#+END_SRC

